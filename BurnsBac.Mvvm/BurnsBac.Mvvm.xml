<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BurnsBac.Mvvm</name>
    </assembly>
    <members>
        <member name="T:BurnsBac.Mvvm.CommandHandler">
            <summary>
            Command helper.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.CommandHandler"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.CommandHandler"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.CommandHandler"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
            <param name="canExecute">Function to determine if command can be executed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.#ctor(System.Action,System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.CommandHandler"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
            <param name="canExecute">Function to determine if command can be executed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.#ctor(System.Action{System.Object},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.CommandHandler"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
            <param name="canExecute">Function to determine if command can be executed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.CommandHandler"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
            <param name="canExecute">Function to determine if command can be executed.</param>
        </member>
        <member name="E:BurnsBac.Mvvm.CommandHandler.CanExecuteChanged">
            <summary>
            Event handler.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.CanExecute(System.Object)">
            <summary>
            Gets a value indicating whether the command can be performed.
            </summary>
            <param name="parameter">Optional CanExecute function parameter.</param>
            <returns>Whether command can be performed.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.CommandHandler.Execute(System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="parameter">Optional action parameter.</param>
        </member>
        <member name="T:BurnsBac.Mvvm.Converters.BoolToVisbilityConverter">
            <summary>
            Converts bool to visibility status.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.Converters.BoolToVisbilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts bool to visibility status.
            </summary>
            <param name="value">Value to convert (bool).</param>
            <param name="targetType">Type to convert to (Visibility).</param>
            <param name="parameter">Convert parameter.</param>
            <param name="culture">Convert culture.</param>
            <returns>
            Visibility status.
            </returns>
        </member>
        <member name="M:BurnsBac.Mvvm.Converters.BoolToVisbilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            NotSupported.
            </summary>
            <param name="value">Value to convert (Visibility).</param>
            <param name="targetType">Type to convert to (bool).</param>
            <param name="parameter">Convert parameter.</param>
            <param name="culture">Convert culture.</param>
            <returns>
            bool.
            </returns>
            <remarks>
            Converts visibility to bool status.
            </remarks>
        </member>
        <member name="T:BurnsBac.Mvvm.Converters.InverseBooleanConverter">
            <summary>
            Inverts a bool.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.Converters.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts bool to inverted value.
            </summary>
            <param name="value">Value to convert (bool).</param>
            <param name="targetType">Type to convert to (bool).</param>
            <param name="parameter">Convert parameter.</param>
            <param name="culture">Convert culture.</param>
            <returns>
            Inverted value.
            </returns>
        </member>
        <member name="M:BurnsBac.Mvvm.Converters.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            NotSupported. Same as Convert.
            </summary>
            <param name="value">Value to convert (bool).</param>
            <param name="targetType">Type to convert to (bool).</param>
            <param name="parameter">Convert parameter.</param>
            <param name="culture">Convert culture.</param>
            <returns>
            Inverted value.
            </returns>
        </member>
        <member name="T:BurnsBac.Mvvm.ICloseable">
            <summary>
            Specifies object (window) has close method.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.ICloseable.Close">
            <summary>
            Closes object (window).
            </summary>
        </member>
        <member name="T:BurnsBac.Mvvm.RelayCommand`1">
            <summary>
            Command that accepts parameter.
            </summary>
            <typeparam name="T">Type of parameter.</typeparam>
        </member>
        <member name="M:BurnsBac.Mvvm.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.RelayCommand`1"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.RelayCommand`1.#ctor(System.Action{`0},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.RelayCommand`1"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
            <param name="canExecute">Function to determine if command can be executed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.RelayCommand`1"/> class.
            </summary>
            <param name="action">Action to perform when the command is executed.</param>
            <param name="canExecute">Function to determine if command can be executed.</param>
        </member>
        <member name="E:BurnsBac.Mvvm.RelayCommand`1.CanExecuteChanged">
            <summary>
            Event handler.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.RelayCommand`1.CanExecute(`0)">
            <summary>
            Gets a value indicating whether the command can be performed.
            </summary>
            <param name="parameter">Optional CanExecute function parameter.</param>
            <returns>Whether command can be performed.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Gets a value indicating whether the command can be performed.
            </summary>
            <param name="parameter">Optional CanExecute function parameter.</param>
            <returns>Whether command can be performed.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.RelayCommand`1.Execute(`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="parameter">Optional action parameter.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.RelayCommand`1.Execute(System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="parameter">Optional action parameter.</param>
        </member>
        <member name="T:BurnsBac.Mvvm.SortedObservableList`1">
            <summary>
            Maintains sort order on a list, which is also an observable collection.
            </summary>
            <typeparam name="T">Underlying list type.</typeparam>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.SortedObservableList`1"/> class.
            </summary>
            <param name="itemCompareFunction">
            Function which compares two elements in the collection
            and returns -1 if the first comes before the second,
            0 if they are equivalent,
            and 1 if the first comes after the seccond.
            </param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.SortedObservableList`1"/> class.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.SortedObservableList`1"/> class.
            </summary>
            <param name="comparer">
            Comparer, returns -1 if the first comes before the second,
            0 if they are equivalent,
            and 1 if the first comes after the seccond.
            </param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.SortedObservableList`1"/>
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
            <param name="itemCompareFunction">
            Function which compares two elements in the collection
            and returns -1 if the first comes before the second,
            0 if they are equivalent,
            and 1 if the first comes after the seccond.
            </param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.SortedObservableList`1"/>
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
            <param name="comparer">
            Comparer, returns -1 if the first comes before the second,
            0 if they are equivalent,
            and 1 if the first comes after the seccond.
            </param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.#ctor(System.Collections.Generic.List{`0},System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.SortedObservableList`1"/>
            class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
            <param name="itemCompareFunction">
            Function which compares two elements in the collection
            and returns -1 if the first comes before the second,
            0 if they are equivalent,
            and 1 if the first comes after the seccond.
            </param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BurnsBac.Mvvm.SortedObservableList`1"/>
            class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
            <param name="comparer">
            Comparer, returns -1 if the first comes before the second,
            0 if they are equivalent,
            and 1 if the first comes after the seccond.
            </param>
        </member>
        <member name="E:BurnsBac.Mvvm.SortedObservableList`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is
            refreshed.
            </summary>
        </member>
        <member name="E:BurnsBac.Mvvm.SortedObservableList`1.PropertyChanged">
            <summary>
            Property changed event.
            </summary>
        </member>
        <member name="E:BurnsBac.Mvvm.SortedObservableList`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="P:BurnsBac.Mvvm.SortedObservableList`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:BurnsBac.Mvvm.SortedObservableList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is readonly (always false).
            </summary>
        </member>
        <member name="P:BurnsBac.Mvvm.SortedObservableList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to get item from.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.Add(`0)">
            <summary>
            Adds an item at the correct index based on the sort method.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items at the correct index based on the sort method.
            </summary>
            <param name="collection">Items to add.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can
            be null for reference types.</param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the
            destination of the elements copied from. The System.Array must
            have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire collection.
            </summary>
            <param name="item">The object to locate in the collection. The value can
            be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.Insert(System.Int32,`0)">
            <summary>
            NotSupported.
            </summary>
            <param name="index">NotSupported1.</param>
            <param name="item">NotSupported2.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object.
            </summary>
            <param name="item">The object to remove from the collection. The value can
            be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns
            false if item was not found in the collection.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.ToNewList">
            <summary>
            Converts the current collection to a list.
            </summary>
            <returns>List of items.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.BlockReentrancy">
            <summary>
            Disallow reentrant attempts to change this collection. E.g. a event handler
            of the CollectionChanged event is not allowed to make changes to this collection.
            </summary>
            <remarks>
            typical usage is to wrap e.g. a OnCollectionChanged call with a using() scope:
            <code>
                    using (BlockReentrancy())
                    {
                        CollectionChanged(this, new NotifyCollectionChangedEventArgs(action, item, index));
                    }
            </code>
            </remarks>
            <returns>Object.</returns>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.CheckReentrancy">
            <summary> Check and assert for reentrant attempts to change this collection. </summary>
            <exception cref="T:System.InvalidOperationException"> raised when changing the collection
            while another collection change is still being notified to other listeners.</exception>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise CollectionChanged event to any listeners.
            Properties/methods modifying this ObservableCollection will raise
            a collection changed event through this virtual method.
            </summary>
            <remarks>
            When overriding this method, either call its base implementation
            or call <see cref="M:BurnsBac.Mvvm.SortedObservableList`1.BlockReentrancy"/> to guard against reentrant collection changes.
            </remarks>
            <param name="e">Notify args.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
            <param name="e">Notify args.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event  />).
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            Helper to raise CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.SortedObservableList`1.OnCollectionReset">
            <summary>
            Helper to raise CollectionChanged event with action == Reset to any listeners.
            </summary>
        </member>
        <member name="T:BurnsBac.Mvvm.SortedObservableList`1.SimpleMonitor">
            <summary>
            This class helps prevent reentrant calls.
            </summary>
            <remarks>
            https://referencesource.microsoft.com/#system/compmod/system/collections/objectmodel/observablecollection.cs,b11e7ea64c231ef2 .
            </remarks>
        </member>
        <member name="T:BurnsBac.Mvvm.ViewModelBase">
            <summary>
            ViewModel base class.
            </summary>
        </member>
        <member name="E:BurnsBac.Mvvm.ViewModelBase.PropertyChanged">
            <summary>
            Property changed event.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Property changed notifier.
            </summary>
            <param name="property">Name of property that changed.</param>
        </member>
        <member name="M:BurnsBac.Mvvm.ViewModelBase.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Property changed notifier.
            </summary>
            <typeparam name="T">Type of object containing property.</typeparam>
            <param name="prop">Property that changed.</param>
        </member>
        <member name="T:BurnsBac.Mvvm.WindowViewModelBase">
            <summary>
            Base class for window ViewModel.
            </summary>
        </member>
        <member name="M:BurnsBac.Mvvm.WindowViewModelBase.CloseWindow(BurnsBac.Mvvm.ICloseable)">
            <summary>
            Closes the window.
            </summary>
            <param name="window">Window to close.</param>
        </member>
    </members>
</doc>
